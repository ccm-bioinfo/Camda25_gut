rm(datos_transpuesto)
colnames(t) <- as.character(t[1, ])
t <- t[-1, ]
summary(t)
t <- as.data.frame(t)
summary(t)
plot(t$`PWY-5686:_UMP_biosynthesis`)
plot(t$`PWY-5686:_UMP_biosynthesis`)
plot(t$`PWY-6151:_S-adenosyl-L-methionine_cycle_I`)
plot(t$`COA-PWY-1:_coenzyme_A_biosynthesis_II_(mammalian)`)
df <- rownames_to_column(df, var = "sample_id")
t <- rownames_to_column(t, var = "sample_id")
samp <- read.csv("C:/Program Files/Git/Camda25_gut/DataSets/CAMDA_2025/metadata_corrected_final.txt")
View(samp)
samp <- read.csv("C:/Program Files/Git/Camda25_gut/DataSets/CAMDA_2025/metadata_corrected_final.txt", sep = "\t")
View(samp)
t <- t(path)
t <- t[-1, ]
t <- as.data.frame(t)
t <- rownames_to_column(t, var = "sample")
t <- t(path)
colnames(t) <- as.character(t[1, ])
t <- t[-1, ]
t <- as.data.frame(t)
t <- rownames_to_column(t, var = "sample")
merg <- samp %>% select(sample, Group) %>% merge(t, by = sample)
merg <- t %>%
left_join(samp %>% select(sample, Group), by = "sample")
View(merg)
merg <- samp %>% select(sample, Group) %>% merge(t, by = "sample")
type_path <- read.csv("C:/Program Files/Git/Camda25_gut/DataSets/CAMDA_2025/Pathways_Types_complete.txt", sep = "\t")
View(type_path)
%>%
long <- merg %>%
pivot_longer(
cols = matches(":"),     # selecciona todas las columnas que contienen ":"
names_to = "Object.ID",
values_to = "value"
)
joined <- long %>%
left_join(type_path %>% select(Object.ID, General_Pathway_Type), by = c("Object.ID"))
View(joined)
joined <- long %>%
mutate(Object.ID = sapply(col_name, function(col) {
matched <- type_path$Object.ID[str_detect(col, fixed(type_path$Object.ID))]
if (length(matched) > 0) matched[1] else NA  # toma el primero que coincida
})) %>%
left_join(type_path, by = "Object.ID")   # agrega la columna
library(stringr)
# 2. Unir con df_pth_types para asociar cada pth.id a su tipo
joined <- long %>%
mutate(Object.ID = sapply(col_name, function(col) {
matched <- type_path$Object.ID[str_detect(col, fixed(type_path$Object.ID))]
if (length(matched) > 0) matched[1] else NA  # toma el primero que coincida
})) %>%
left_join(type_path, by = "Object.ID")   # agrega la columna 'type'
# 2. Unir con df_pth_types para asociar cada pth.id a su tipo
joined <- long %>%
mutate(Object.ID = sapply(col_name, function(col) {
matched <- type_path$Object.ID[str_detect(col, fixed(type_path$Object.ID))]
if (length(matched) > 0) matched[1] else NA  # toma el primero que coincida
})) %>%
left_join(type_path %>% select(Object.ID, General_Pathway_Type), by = "Object.ID")   # agrega la columna 'type'
View(long)
# 2. Unir con df_pth_types para asociar cada pth.id a su tipo
joined <- long %>%
mutate(Object.ID = sapply(Object.ID, function(col) {
matched <- type_path$Object.ID[str_detect(col, fixed(type_path$Object.ID))]
if (length(matched) > 0) matched[1] else NA  # toma el primero que coincida
})) %>%
left_join(type_path %>% select(Object.ID, General_Pathway_Type), by = "Object.ID")   # agrega la columna 'type'
joined <- long %>%
# Usar una unión más segura y eficiente (evitar sapply + str_detect)
left_join(
type_path %>%
select(Object.ID, General_Pathway_Type) %>%
distinct(Object.ID, .keep_all = TRUE),  # Evitar duplicados
by = "Object.ID"
) %>%
# Opcional: Manejar casos donde no hay coincidencia (NA)
mutate(General_Pathway_Type = ifelse(is.na(General_Pathway_Type), "Unclassified", General_Pathway_Type))
View(joined)
library(fuzzyjoin)
install.packages("fuzzyjoin")
library(fuzzyjoin)
joined <- long %>%
regex_left_join(
type_path %>% select(Object.ID, General_Pathway_Type),
by = c("Object.ID" = "Object.ID")  # Coincidencia parcial
)
View(joined)
joined %>% filter(is.na(General_Pathway_Type)) %>% count()  # IDs no clasificados
# 3. Agrupar y sumar los valores por sample, group y type
grouped <- joined %>%
group_by(sample, group, type) %>%
summarise(total = sum(value), .groups = "drop")
# 3. Agrupar y sumar los valores por sample, group y type
grouped <- joined %>%
group_by(sample, Group, General_Pathway_Type) %>%
summarise(total = sum(value), .groups = "drop")
# 3. Agrupar y sumar los valores por sample, group y type
# Asegurarte de que 'value' sea numérico
joined$value <- as.numeric(joined$value)
grouped <- joined %>%
group_by(sample, Group, General_Pathway_Type) %>%
summarise(total = sum(value), .groups = "drop")
# 4. Volver a formato ancho: columnas separadas para tipo A y tipo B
Path_grouped <- grouped %>%
pivot_wider(
names_from = type,
values_from = total
)
View(grouped)
# 4. Volver a formato ancho: columnas separadas para tipo A y tipo B
Path_grouped <- grouped %>%
pivot_wider(
names_from = General_Pathway_Type,
values_from = total
)
View(Path_grouped)
library(ggplot2)
ggplot(grouped, aes(x = total, fill = Group, color = Group)) +
geom_density(alpha = 0.4) +
facet_wrap(~ General_Pathway_Type, scales = "free") +
labs(
title = "Densidad de valores por tipo de pathway y grupo",
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
ggplot(grouped, aes(x = total, fill = Group, color = Group)) +
geom_density(alpha = 0.4) +
facet_wrap(~ General_Pathway_Type, scales = "free") +
labs(
title = "Densidad de valores por tipo de pathway y grupo",
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
unique_pathways <- unique(grouped$General_Pathway_Type)
for (pathway in unique_pathways) {
for (pathway in unique_pathways) {
p <- grouped %>%
filter(General_Pathway_Type == pathway) %>%
ggplot(aes(x = total, fill = Group, color = Group)) +
geom_density(alpha = 0.4) +
labs(
title = paste("Densidad para:", pathway),
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()}
dir.create("densidad_pathways", showWarnings = FALSE)
for (pathway in unique_pathways) {
p <- grouped %>%
filter(General_Pathway_Type == pathway) %>%
ggplot(aes(x = total, fill = Group, color = Group)) +
geom_density(alpha = 0.4) +
labs(
title = paste("Densidad para:", pathway),
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
ggsave(
filename = paste0("densidad_pathways/", gsub("[^a-zA-Z0-9]", "_", pathway), ".png"),
plot = p,
width = 8, height = 5
)
}
for (pathway in unique_pathways) {
print(
grouped %>%
filter(General_Pathway_Type == pathway) %>%
ggplot(aes(x = total, fill = Group, color = Group)) +
geom_density(alpha = 0.4) +
labs(
title = paste("Densidad para:", pathway),
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
)
# Esperar a que el usuario presione Enter antes de mostrar el siguiente gráfico
readline(prompt = "Presiona [Enter] para ver el siguiente gráfico...")
}
for (pathway in unique_pathways) {
print(
grouped %>%
filter(General_Pathway_Type == pathway) %>%
ggplot(aes(x = total, fill = Group, color = Group)) +
geom_density(alpha = 0.4) +
labs(
title = paste("Densidad para:", pathway),
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
)
# Esperar a que el usuario presione Enter antes de mostrar el siguiente gráfico
readline(prompt = "Presiona [Enter] para ver el siguiente gráfico...")
}
or (pathway in unique_pathways) {
for (pathway in unique_pathways) {
p <- grouped %>%
filter(General_Pathway_Type == pathway) %>%
ggplot(aes(x = total, fill = Group, color = Group)) +
geom_density(alpha = 0.4) +
labs(
title = paste("Densidad para:", pathway),
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
print(p)        # Mostrar explícitamente el gráfico
dev.flush()     # Forzar refresco del dispositivo gráfico (en algunos entornos)
readline(prompt = "Presiona [Enter] para ver el siguiente gráfico...")
}
for (pathway in unique_pathways) {
p <- Path_grouped %>%
filter(General_Pathway_Type == pathway) %>%
ggplot(aes(x = total, fill = Group, color = Group)) +
geom_density(alpha = 0.4) +
labs(
title = paste("Densidad para:", pathway),
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
ggsave(
filename = paste0("densidad_pathways/", gsub("[^a-zA-Z0-9]", "_", pathway), ".png"),
plot = p,
width = 8, height = 5
)
}
unique_Diseases <- unique(Path_grouped$Group)
for (Diseases in unique_Diseases) {
p <- Path_grouped %>%
filter(Group == Diseases) %>%
ggplot(aes(x = total, fill = Biosynthesis_of_Cofactors_and_Vitamins, color = Biosynthesis_of_Cofactors_and_Vitamins)) +
geom_density(alpha = 0.4) +
labs(
title = paste("Densidad para:", pathway),
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
print(p)        # Mostrar explícitamente el gráfico
dev.flush()     # Forzar refresco del dispositivo gráfico (en algunos entornos)
readline(prompt = "Presiona [Enter] para ver el siguiente gráfico...")
}
for (Diseases in unique_Diseases) {
p <- Path_grouped %>%
filter(Group == Diseases) %>%
ggplot(aes(x = Biosynthesis_of_Cofactors_and_Vitamins fill = Biosynthesis_of_Cofactors_and_Vitamins, color = Biosynthesis_of_Cofactors_and_Vitamins)) +
for (Diseases in unique_Diseases) {
p <- Path_grouped %>%
filter(Group == Diseases) %>%
ggplot(aes(x = Biosynthesis_of_Cofactors_and_Vitamins, fill = Biosynthesis_of_Cofactors_and_Vitamins, color = Biosynthesis_of_Cofactors_and_Vitamins)) +
geom_density(alpha = 0.4) +
labs(
title = paste("Densidad para:", pathway),
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
print(p)        # Mostrar explícitamente el gráfico
dev.flush()     # Forzar refresco del dispositivo gráfico (en algunos entornos)
readline(prompt = "Presiona [Enter] para ver el siguiente gráfico...")
}
View(grouped)
ggplot(Path_grouped, aes(x = Biosynthesis_of_Cofactors_and_Vitamins, fill = Group, color = Group)) +
geom_density(alpha = 0.4) +
labs(
title = "Densidad Biosynthesis_of_Cofactors_and_Vitamins",
x = "Total valores",
y = "Densidad"
) +
theme_minimal()
getwd
wd
getwd()
setwd("C:/Program Files/Git/Camda25_gut")
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Program Files/Git/Camda25_gut")
library(tidyverse)
library(fuzzyjoin)
library(stringr)
# Definir la paleta de colores
group_colors <- c(
'ID' = '#56B4E9',
'NP' = '#E69F00',
'MD' = '#0072B2',
'MBD' = '#CC79A7',
'CD' = '#F0E442',
'DD' = '#D55E00',
'H' = '#009E73'
)
# Loop para crear una gráfica por variable
for (col_name in columns_to_plot) {
p <- ggplot(Path_grouped_P %>% filter(Group != "delete"),
aes_string(x = col_name, fill = "Group", color = "Group")) +
geom_density(alpha = 0.4) +
scale_fill_manual(values = group_colors) +
scale_color_manual(values = group_colors) +
labs(
title = paste(col_name),
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
ggsave(
filename = paste0("DataSets/CAMDA_2025/densidad_pathways/",
gsub("[^a-zA-Z0-9]", "_", col_name), "Parental.png"),
plot = p,
width = 8,
height = 5
)
print(p)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Program Files/Git/Camda25_gut")
library(tidyverse)
library(fuzzyjoin)
library(stringr)
getwd()
path <- read.csv("DataSets/CAMDA_2025/pathways.txt", sep = "\t")
samp <- read.csv("DataSets/CAMDA_2025/metadata_corrected_final.txt", sep = "\t")
type_path <- read.csv("DataSets/CAMDA_2025/Pathways_Types_complete.txt", sep = "\t")
t <- t(path)
colnames(t) <- as.character(t[1, ])
t <- t[-1, ]
t <- as.data.frame(t)
t <- rownames_to_column(t, var = "sample")
merg <- samp %>% select(sample, Group) %>%
merge(t, by = "sample")
long <- merg %>%
pivot_longer(
cols = matches(":"),
names_to = "Object.ID",
values_to = "value"
)
joined <- long %>%
regex_left_join(
type_path %>% select(Object.ID, General_Pathway_Type),
by = c("Object.ID" = "Object.ID")  # Coincidencia parcial
)
no_match <- joined %>%
filter(is.na(General_Pathway_Type))
unique(no_match$Object.ID.x)
# Agrupar y sumar los valores por sample, group y type
joined$value <- as.numeric(joined$value)
grouped <- joined %>%
group_by(sample, Group, General_Pathway_Type) %>%
summarise(total = sum(value), .groups = "drop")
# Volver a formato ancho
Path_grouped <- grouped %>%
pivot_wider(
names_from = General_Pathway_Type,
values_from = total
)
# Crear carpeta si no existe
if (!dir.exists("DataSets/CAMDA_2025/densidad_pathways")) {
dir.create("DataSets/CAMDA_2025/densidad_pathways")
}
write.table(Path_grouped, file = "DataSets/CAMDA_2025/Path_agrupados.txt", row.names = FALSE, quote = FALSE)
# Lista de columnas numéricas a graficar
columns_to_plot <- unique(grouped$General_Pathway_Type)
# Loop para crear una gráfica por variable
for (col_name in columns_to_plot) {
p <- ggplot(Path_grouped %>% filter(Group != "delete"),
aes_string(x = col_name, fill = "Group", color = "Group")) +
geom_density(alpha = 0.4) +
labs(
title = paste (col_name),
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
ggsave(
filename = paste0("DataSets/CAMDA_2025/densidad_pathways/", gsub("[^a-zA-Z0-9]", "_", col_name), ".png"),
plot = p,
width = 8, height = 5
)
print(p)
}
joined_Parental <- long %>%
regex_left_join(
type_path %>% select(Object.ID, Parental.Ontology.pathway_type),
by = c("Object.ID" = "Object.ID")  # Coincidencia parcial
)
# Agrupar y sumar los valores por sample, group y type
joined_Parental$value <- as.numeric(joined_Parental$value)
grouped_Parental <- joined_Parental %>%
group_by(sample, Group, Parental.Ontology.pathway_type) %>%
summarise(total = sum(value), .groups = "drop")
# Volver a formato ancho
Path_grouped_P <- grouped_Parental %>%
pivot_wider(
names_from = Parental.Ontology.pathway_type,
values_from = total
)
# Crear carpeta si no existe
if (!dir.exists("DataSets/CAMDA_2025/densidad_pathways")) {
dir.create("DataSets/CAMDA_2025/densidad_pathways")
}
write.table(Path_grouped_P, file = "DataSets/CAMDA_2025/Path_agrupados_Parental.txt", sep = "\t", row.names = FALSE, quote = FALSE)
# Lista de columnas numéricas a graficar
columns_to_plot <- unique(grouped_Parental$Parental.Ontology.pathway_type)
# Definir la paleta de colores
group_colors <- c(
'ID' = '#56B4E9',
'NP' = '#E69F00',
'MD' = '#0072B2',
'MBD' = '#CC79A7',
'CD' = '#F0E442',
'DD' = '#D55E00',
'H' = '#009E73'
)
# Loop para crear una gráfica por variable
for (col_name in columns_to_plot) {
p <- ggplot(Path_grouped_P %>% filter(Group != "delete"),
aes_string(x = col_name, fill = "Group", color = "Group")) +
geom_density(alpha = 0.4) +
scale_fill_manual(values = group_colors) +
scale_color_manual(values = group_colors) +
labs(
title = paste(col_name),
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
ggsave(
filename = paste0("DataSets/CAMDA_2025/densidad_pathways/",
gsub("[^a-zA-Z0-9]", "_", col_name), "Parental.png"),
plot = p,
width = 8,
height = 5
)
print(p)
}
# Loop modificado con la paleta de colores
for (col_name in columns_to_plot) {
p <- ggplot(Path_grouped %>% filter(Group != "delete"),
aes_string(x = col_name, fill = "Group", color = "Group")) +
geom_density(alpha = 0.4) +
scale_fill_manual(values = group_colors) +  # Aplica colores de relleno
scale_color_manual(values = group_colors) + # Aplica colores de línea
labs(
title = paste(col_name),
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
ggsave(
filename = paste0("DataSets/CAMDA_2025/densidad_pathways/",
gsub("[^a-zA-Z0-9]", "_", col_name), ".png"),
plot = p,
width = 8,
height = 5
)
print(p)
}
# Lista de columnas numéricas a graficar
columns_to_plot <- unique(grouped_Parental$Parental.Ontology.pathway_type)
# Loop para crear una gráfica por variable
for (col_name in columns_to_plot) {
p <- ggplot(Path_grouped_P %>% filter(Group != "delete"),
aes_string(x = col_name, fill = "Group", color = "Group")) +
geom_density(alpha = 0.4) +
scale_fill_manual(values = group_colors) +
scale_color_manual(values = group_colors) +
labs(
title = paste(col_name),
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
ggsave(
filename = paste0("DataSets/CAMDA_2025/densidad_pathways/",
gsub("[^a-zA-Z0-9]", "_", col_name), "Parental.png"),
plot = p,
width = 8,
height = 5
)
print(p)
}
# Lista de columnas numéricas a graficar
columns_to_plot <- unique(grouped$General_Pathway_Type)
# Loop modificado con la paleta de colores
for (col_name in columns_to_plot) {
p <- ggplot(Path_grouped %>% filter(Group != "delete"),
aes_string(x = col_name, fill = "Group", color = "Group")) +
geom_density(alpha = 0.4) +
scale_fill_manual(values = group_colors) +  # Aplica colores de relleno
scale_color_manual(values = group_colors) + # Aplica colores de línea
labs(
title = paste(col_name),
x = "Total de valores",
y = "Densidad"
) +
theme_minimal()
ggsave(
filename = paste0("DataSets/CAMDA_2025/densidad_pathways/",
gsub("[^a-zA-Z0-9]", "_", col_name), ".png"),
plot = p,
width = 8,
height = 5
)
print(p)
}
